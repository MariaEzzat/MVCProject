// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSchool.Models;

#nullable disable

namespace SSchool.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220714233644_ooooooo")]
    partial class ooooooo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SSchool.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("SSchool.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("level_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("level_id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SSchool.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<int>("MinDegree")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("level_id")
                        .HasColumnType("int");

                    b.Property<int>("teacher_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("level_id");

                    b.HasIndex("teacher_id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SSchool.Models.SubResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<int>("student_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("student_id");

                    b.HasIndex("subject_id");

                    b.ToTable("SubResults");
                });

            modelBuilder.Entity("SSchool.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SSchool.Models.TeachLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("level_id")
                        .HasColumnType("int");

                    b.Property<int>("teacher_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("level_id");

                    b.HasIndex("teacher_id");

                    b.ToTable("TeachLevels");
                });

            modelBuilder.Entity("SSchool.Models.Student", b =>
                {
                    b.HasOne("SSchool.Models.Level", "level")
                        .WithMany("Students")
                        .HasForeignKey("level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("level");
                });

            modelBuilder.Entity("SSchool.Models.Subject", b =>
                {
                    b.HasOne("SSchool.Models.Level", "level")
                        .WithMany("subjects")
                        .HasForeignKey("level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSchool.Models.Teacher", "teacher")
                        .WithMany("subjects")
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("level");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("SSchool.Models.SubResult", b =>
                {
                    b.HasOne("SSchool.Models.Student", "student")
                        .WithMany("subresults")
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSchool.Models.Subject", "subject")
                        .WithMany("subresults")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("SSchool.Models.TeachLevel", b =>
                {
                    b.HasOne("SSchool.Models.Level", "level")
                        .WithMany("teachLevels")
                        .HasForeignKey("level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSchool.Models.Teacher", "teacher")
                        .WithMany("teachLevels")
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("level");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("SSchool.Models.Level", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("subjects");

                    b.Navigation("teachLevels");
                });

            modelBuilder.Entity("SSchool.Models.Student", b =>
                {
                    b.Navigation("subresults");
                });

            modelBuilder.Entity("SSchool.Models.Subject", b =>
                {
                    b.Navigation("subresults");
                });

            modelBuilder.Entity("SSchool.Models.Teacher", b =>
                {
                    b.Navigation("subjects");

                    b.Navigation("teachLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
